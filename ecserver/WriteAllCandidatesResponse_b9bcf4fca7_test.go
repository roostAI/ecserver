// Test generated by RoostGPT for test test using AI Type Open AI and AI Model gpt-4

package main

import (
	"bytes"
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
)

type AllCandidatesResponse struct {
	Candidates []string
}

var candidates = []string{"John Doe", "Jane Doe"}

func writeAllCandidatesResponse(w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	respJson, err := json.Marshal(&AllCandidatesResponse{
		Candidates: candidates,
	})
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
	}
	w.Write(respJson)
}

func TestWriteAllCandidatesResponse_b9bcf4fca7(t *testing.T) {
	// Test case 1: Check if the response is correctly returned
	req, err := http.NewRequest("GET", "/candidates", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(writeAllCandidatesResponse)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusOK)
	}

	expected := `{"Candidates":["John Doe","Jane Doe"]}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v",
			rr.Body.String(), expected)
	}

	// Test case 2: Check if the response header is set to application/json
	req, err = http.NewRequest("GET", "/candidates", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr = httptest.NewRecorder()

	handler.ServeHTTP(rr, req)

	if contentType := rr.Header().Get("Content-Type"); contentType != "application/json" {
		t.Errorf("content type header does not match: got %v want %v",
			contentType, "application/json")
	}
}
